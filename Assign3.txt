{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Assign3.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EwzQGXO-2tT_",
        "colab_type": "text"
      },
      "source": [
        "**1.** \n",
        "\n",
        "Write a function to compute 5/0 and use try/except to catch the exceptions.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-7cW0nKu2u8A",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "2f57960b-9419-45c5-88d9-fd3f5095b633"
      },
      "source": [
        "def divide(a,b):\n",
        "    \n",
        "    try:\n",
        "        return a/b\n",
        "    except ZeroDivisionError as e:\n",
        "        print(\"Couldn't Divide Following Error has Occured:\\n\",e)\n",
        "\n",
        "divide(5,0)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Couldn't Divide Following Error has Occured:\n",
            " division by zero\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "12YqoI4X9xnd",
        "colab_type": "text"
      },
      "source": [
        "**2.**\n",
        "\n",
        "subjects=[\"Americans \",\"Indians\"]\n",
        "\n",
        "verbs=[\"play\",\"watch\"]\n",
        "\n",
        "objects=[\"Baseball\",\"Cricket\"]\n",
        "\n",
        "Implement a Python program to generate all sentences"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CW2rvRtQ9x25",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        },
        "outputId": "ae2e3f74-b7bd-4cea-a4c2-9d6b6cb20019"
      },
      "source": [
        "subjects=[\"Americans \",\"Indians\"]\n",
        "verbs=[\"play\",\"watch\"]\n",
        "objects=[\"Baseball\",\"Cricket\"]\n",
        "\n",
        "for s in subjects:\n",
        "    for v in verbs:\n",
        "        for o in objects:\n",
        "            print(s,v,o)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Americans  play Baseball\n",
            "Americans  play Cricket\n",
            "Americans  watch Baseball\n",
            "Americans  watch Cricket\n",
            "Indians play Baseball\n",
            "Indians play Cricket\n",
            "Indians watch Baseball\n",
            "Indians watch Cricket\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "34gCY5Ib3WFb",
        "colab_type": "text"
      },
      "source": [
        "**3.**\n",
        "\n",
        "Write a function so that the columns of the output matrix are powers of the input vector\n",
        "\n",
        "Such a matrix with a geometric progression in each row is named for AlexandreTheophile Vandermonde."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yhd3oteWs4j4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "c8893d56-179c-457a-99fc-f05b51a3bed2"
      },
      "source": [
        "#Let's Create a Matrix\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "def create_VanderMatrix(input_vector,N):\n",
        "\n",
        "    n = len(input_vector)\n",
        "    V = np.zeros((n,n))\n",
        "    for i in range(1,N+1):\n",
        "        V[:,i-1] = input_vector**(i-1)\n",
        "\n",
        "    for i in range(len(V)):\n",
        "        V[i,:] = sorted(V[i,:], reverse=True)\n",
        "\n",
        "    return V.astype('int')\n",
        "\n",
        "input_vector = np.array([2,4,6,8]) \n",
        "create_VanderMatrix(input_vector,4)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  8,   4,   2,   1],\n",
              "       [ 64,  16,   4,   1],\n",
              "       [216,  36,   6,   1],\n",
              "       [512,  64,   8,   1]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    }
  ]
}